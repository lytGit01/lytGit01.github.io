(window.webpackJsonp=window.webpackJsonp||[]).push([[13],{422:function(t,s,a){"use strict";a.r(s);var e=a(2),n=Object(e.a)({},(function(){var t=this,s=t._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h3",{attrs:{id:"创建-ajax"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#创建-ajax"}},[t._v("#")]),t._v(" 创建 Ajax")]),t._v(" "),s("blockquote",[s("ol",[s("li",[t._v("创建 Ajax实例：let xhr = new XMLHttpRequest()，注意：IE6 不兼容这种写法")]),t._v(" "),s("li",[t._v("打开请求，配置请求前的配置项：共 5个参数 xhr.open([http method], [url], [async], [userName], [userPass])")])])]),t._v(" "),s("ul",[s("li",[t._v("http methods 有常用的请求方式有：post，get，delete，put，head，options，trace，connect。")]),t._v(" "),s("li",[t._v("url：是想服务器请求的 api。")]),t._v(" "),s("li",[t._v("async：代表异步，默认是 true 异步，false 是同步。")]),t._v(" "),s("li",[t._v("userName、userPass：代表用户名和密码")])]),t._v(" "),s("blockquote",[s("ol",{attrs:{start:"3"}},[s("li",[t._v("http methods 细分：")])])]),t._v(" "),s("ul",[s("li",[t._v("delete：删除服务器端的某些数据，一般是文件。")]),t._v(" "),s("li",[t._v("put：向服务器上存放某些内容，一般是文件。")]),t._v(" "),s("li",[t._v("head：只是获取从服务器端返回的请求头信息，不要响应主体的内容。")]),t._v(" "),s("li",[t._v("options：一般用于向服务器发送探测性请求，看是否连接成功。")])]),t._v(" "),s("blockquote",[s("ol",{attrs:{start:"3"}},[s("li",[t._v("事件监听 readystatechange，一般监听 ajax 状态码发生改变的事件，这个事件可以获取服务器返回的响应主和请求头。xhr.onreadystatechange = function (){}，对于同步执行的 Ajax 请求代码步骤三要放在send的前面，否则没有意义。")])])]),t._v(" "),s("blockquote",[s("ol",{attrs:{start:"4"}},[s("li",[t._v("发送 ajax 请求，ajax 任务开始执行。xhr.send([])，XMLHttpRequest.send() 方法中如果 Ajax 请求是异步的则这个方法发送请求后就会返回，如果Ajax请求是同步的，那么请求必须知道响应后才会返回。 第五步算上的话，就是读取返回的数据 xhr.responseText 。")])])]),t._v(" "),s("div",{staticClass:"language-js line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 1. 创建 XMLHttpRequest 实例")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" xhr "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("XMLHttpRequest")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 2. 打开和服务器的连接")]),t._v("\nxhr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("open")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'get'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'URL'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 3.发送")]),t._v("\nxhr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("send")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 4. 接收变化。")]),t._v("\nxhr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("onreadystatechange")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("xhr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("readyState "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" xhr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("status "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("200")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("   "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// readyState: ajax 状态，status：http 请求状态")]),t._v("\nconsole"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("xhr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("responseText"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("   "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//响应主体")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br"),s("span",{staticClass:"line-number"},[t._v("12")]),s("br")])]),s("h3",{attrs:{id:"ajax-状态和-http-状态码"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#ajax-状态和-http-状态码"}},[t._v("#")]),t._v(" Ajax 状态和 HTTP 状态码")]),t._v(" "),s("blockquote",[s("p",[t._v("Ajax 状态一共有 5 种 xhr.readyState，分别是 0, 1, 2, 3, 4")])]),t._v(" "),s("ul",[s("li",[t._v("状态 0：unsent，刚创建的 XMLHttpRequest 实例，还没有发送。")]),t._v(" "),s("li",[t._v("状态 1：（载入）已调用 send() 方法，正在发送请求。")]),t._v(" "),s("li",[t._v("状态 2：（载入完成）send() 方法执行完成，已经接收到全部响应内容")]),t._v(" "),s("li",[t._v("状态 3：loading（交互）正在解析响应内容")]),t._v(" "),s("li",[t._v("状态 4：done 表示响应的主体内容解析完成，可以在客户端调用了")])]),t._v(" "),s("blockquote",[s("p",[t._v("HTTP 常见的状态码")])]),t._v(" "),s("ul",[s("li",[t._v("1xx：信息，服务器收到请求，需要请求者继续执行操作。")]),t._v(" "),s("li",[t._v("2xx：表示请求已经被服务器接收，理解，请接受。常见的有，200 表示ok，表示服务能够返回信息。204 No Content 无内容。服务器成功处理，但未返回内容。")]),t._v(" "),s("li",[t._v("3xx：重定向，需要进一步的操作以完成请求。一类重要的高频考点：301：表示永久转移，返回旧域名会跳转到心域名。302：临时转移。一般用于服务器负载均衡，但服务器的并发数达到最大时，服务器会将后续访问的用户转移到其他服务器上去。307：表示临时重定向。304：表示不设置缓存，对于不经常更新的文件，例如css/js/html文件，服务器会结合客户端设置304状态，加载过的资源下次请求时会在客户端中获取。")]),t._v(" "),s("li",[t._v("4xx：客户端错误，请求包含语法错误或无法完成请求，无法被服务器端理解。400：表示请求的参数错误。401：表示无权限访问。404：表示请求的资源不存在。413：表示和服务器的交互过大。")]),t._v(" "),s("li",[t._v("5xx：服务器端出错，服务器在处理请求的过程中发生了错误。500：表示服务器端出现未知的错误。503：服务器超负荷。")])]),t._v(" "),s("h3",{attrs:{id:"ajax-中常用的属性和方法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#ajax-中常用的属性和方法"}},[t._v("#")]),t._v(" Ajax 中常用的属性和方法")]),t._v(" "),s("ul",[s("li",[t._v("onabort：表示请求中断后要处理的事，和 xhr.abort() 一起使用。")]),t._v(" "),s("li",[t._v("ontimeout：表示请求的超时，执行的方法，和 timeout 设定的事件一起使用。")]),t._v(" "),s("li",[t._v("response：响应的主体内容。")]),t._v(" "),s("li",[t._v("responseText：响应的具体内容是字符串，一般是 json 字符串。")]),t._v(" "),s("li",[t._v("responseXML：响应的具体内容是文档。")]),t._v(" "),s("li",[t._v("status：http 的状态码。")]),t._v(" "),s("li",[t._v("statusText：状态码描述。")]),t._v(" "),s("li",[t._v("withCredentials：表示是否允许跨域。")]),t._v(" "),s("li",[t._v("getAllResponseHeaders：获取所有响应头信息。")]),t._v(" "),s("li",[t._v("xhr.open()：打开URL请求。")]),t._v(" "),s("li",[t._v("xhr.send()：表示发送 ajax。")]),t._v(" "),s("li",[t._v("setRequestHeader()：设置请求头。这个属性在必须在 xhr.open() 后面。")])]),t._v(" "),s("h3",{attrs:{id:"思考-post-和-get-有什么区别"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#思考-post-和-get-有什么区别"}},[t._v("#")]),t._v(" 思考：post 和 get 有什么区别")]),t._v(" "),s("blockquote",[s("p",[t._v("http 的所有请求方法中都可以从服务端获取数据和传递内容。get：主要是从服务器获取数据。post 主要发送数据给服务器。 GET 和 POST 本质上就是 TCP 链接，并无差别，但是由于HTTP的规定和浏览器/服务器的限制具体由如下的区别：")])]),t._v(" "),s("ul",[s("li",[t._v("从缓存的角度上说，get 请求会被浏览器默认缓存下来，而 post 请求默认不会。")]),t._v(" "),s("li",[t._v("从参数来说，get 请求的参数一般放在 url 中，post 请求是放在请求主体中，因此 post 请求更安全一些。")]),t._v(" "),s("li",[t._v("从 TCP 上来说，get 产生一个 TCP 数据包；post 产生两个 TCP 数据包。对于 GET 方式的请求，浏览器会把 http header 和 data 一并发送出去，服务器响应200（返回数据）；而对于 POST，浏览器先发送 header，服务器响应 100 continue，浏览器再发送data，服务器响应200 ok（返回数据）。虽然 post 请求需要发送两次，但是时间上是基本差别不大的。还有并不是所有浏览器都会在 POST 中发送两次包，Firefox 就只发送一次。")])])])}),[],!1,null,null,null);s.default=n.exports}}]);